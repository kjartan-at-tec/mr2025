#+OPTIONS: toc:nil
# #+LaTeX_CLASS: koma-article 

#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation,aspectratio=1610]
#+OPTIONS: H:2
# #+BEAMER_THEME: Madrid
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)
     
#+LaTex_HEADER: \usepackage{khpreamble, euscript}
#+LaTex_HEADER: \DeclareMathOperator{\atantwo}{atan2}
#+LaTex_HEADER: \newcommand*{\ctrb}{\EuScript{C}}
#+LaTex_HEADER: \newcommand*{\obsv}{\EuScript{O}}

#+title: Discrete-time State feedback

* What do I want the students to understand?			   :noexport:
  - Understand state feedback design

* Which activities will the students do?			   :noexport:
  1. Calculate characteristic equation feedback for double integrator
  2. Write pseudo code to compute control signal

* Discret-time state space model
** The discrete-time state-space model

** The discrete-time state-space model
   #+begin_export latex
   \begin{center}
     \begin{tikzpicture}[node distance=42mm, block/.style={inner sep=6pt, rectangle, draw, minimum width=15mm}, sumnode/.style={circle, draw, inner sep=2pt}]
       \node[coordinate] (input) {};
       \node[block, right of=input, align=center] (plant)  {$x(k+1) = \Phi x(k) + \Gamma u(k)$\\$y(k) = C x(k)$};
       \node[coordinate, right of=plant] (output) {};

       \draw[->] (input) -- node[above, pos=0.3] {$u(k)$} (plant);
       \draw[->] (plant) -- node[above, near end] {$y(k)$} (output);
     \end{tikzpicture}
   \end{center}

   #+end_export


* PMSM - sysid

** Obtain state-space model from discrete-time pulse-transfer function

** The permanent magnet synchronous motor
   #+begin_center
   \includegraphics[width=0.9\linewidth]{../../figures/permanent-motor.jpg}
   #+end_center

*** Notas                                                          :noexport:
    En la tarea pasada trabajamos con un modelo de este sistema, un motor electrico síncrono con imán permanente. Es muy usado. Hay versiones con el imán permanente fijo en el rotor, o fijo en el estator.

** The PMSM
   #+begin_center
   \includegraphics[width=0.8\linewidth]{../../figures/pmsm_control_block_diag.png}
   #+end_center
   #+begin_export latex
   {\footnotesize Liu and Li  ``Speed control for PMSM servo system'', IEEE Transactions on Industrial Electronics, 2012.}
   #+end_export
*** Notas                                                          :noexport:
    El modelo que usabamos para la simulación en simulink estaba en forma de tres ecuaciones diferenciales non-lineales. Vimos este diagrama de bloque que indica que hay un lazo de control interna con dos controladores PI que tratan de mantener la corriente id en cero y que tratan de seguir una corriente deseada iq^*. El lazo de control externo para control de la velocidad fue lo que diseñamos y implementamos nosotros en la tarea.

    El diseño de controloador RST, dos grados de libertad, estaba basada en un modelo de primer orden del motor, y con un retraso para representar el filtro de anti-aliasing. Es un modelo muy simple de este sistema complejo. Pero el modelo era suficiente  para llegar a un control bueno.

    Pero posiblemente se puede llegar a un mejor control usando un modelo de orden más alto. Entonces ayer vimos un procedimiento de como obtener datos del model non-lineal en simulacion, y despues estimar modelos de diferentes ordenens.

    En lo que sigue vamos a ver el resultado que obtuve para un model de dos polos y dos ceros, y con un retraso. 
** Identified model
   Two poles, two zeros, one delay
   #+begin_export latex
   \begin{center}
     \begin{tikzpicture}[node distance=22mm, block/.style={rectangle, draw, minimum width=10mm}, sumnode/.style={circle, draw, inner sep=2pt}]
    
       \node[coordinate] (input) {};
       \node[block, right of=input] (delay1)  {$\frac{1}{z}$};
       \node[block, right of=delay1, node distance=30mm] (plant)  {$\frac{b_0z^2 + b_1z + b_2}{z^2 + a_1 z + a_2}$};
       \node[coordinate, right of=plant] (output) {};

       \draw[->] (input) -- node[above, pos=0.3] {$u(k)$} (delay1);
       \draw[->] (delay1) -- node[above, pos=0.3] {} (plant);
       \draw[->] (plant) -- node[above, near end] {$y(k)$} (output);

       \begin{scope}[yshift=-1cm, xshift = 3cm]
       \node {$\Updownarrow$};
       \end{scope}
       \begin{scope}[yshift=-3cm, xshift = 3cm]
       \node {$\Updownarrow$};
       \end{scope}

       \node[coordinate, below of=input, node distance=2cm] (input2) {};
       \node[block, right of=input2, node distance=30mm] (plant)  {$\frac{b_0z^2 + b_1z + b_2}{z^2 + a_1 z + a_2}$};
       \node[block, right of=plant] (delay2)  {$\frac{1}{z}$};
       \node[coordinate, right of=delay2] (output) {};

       \draw[->] (input2) -- node[above, pos=0.3] {$u(k)$} (plant);
       \draw[->] (plant) -- node[above, pos=0.3] {} (delay2);
       \draw[->] (delay2) -- node[above, near end] {$y(k)$} (output);

       \node[coordinate, below of=input2, node distance=2cm] (input3) {};
       \node[block, right of=input3, node distance=30mm] (plant)  {$\frac{b_0z^2 + b_1z + b_2}{z(z^2 + a_1 z + a_2})$};
       \node[coordinate, right of=plant, node distance=30mm] (output) {};

       \draw[->] (input3) -- node[above, pos=0.3] {$u(k)$} (plant);
       \draw[->] (plant) -- node[above, near end] {$y(k)$} (output);



     \end{tikzpicture}
   \end{center}

       #+end_export

*** Notas                                                          :noexport:
    La sistema del motor en si es de segunda orden, con dos ceros y dos polos. El retraso esta en la salida del motor, porque corresponde al filtro anti-aliasing. Pero si asumimos que no entra otras señales en este modelo, o que estas señales sean cero, podemos mover el retraso, y independiente de donde ponemos el retraso, llegar al modelo abajo. Este modelo la verdad es de tercer orden, porque tiene polynomia de grado tres en el denominador. 
 
** ARX model                                                       :noexport:
Given signals \(u(k), \; k=1,2,\ldots, N\) y \(y(k), \; k=1,2,\ldots,N\), el modelo ARX \(A(\shift)y(k) = B(\shift)u(k-d) + \shift^n e(k)\) con \(n\) polos, \(m\) ceros y retraso de \(d\) pasos.

*Predictor*
\begin{multline*}
\hat{y}(k+1) = -a_1y(k) - \cdots - a_ny(k-n+1) \\+ b_0u(k+m-n-d+1) + \cdots + b_mu(k-n-d+1)
\end{multline*}
*Objetivo* Estimar los parametro \(a_1, a_2, \ldots, \a_n, b_0, b_1, \ldots, b_m\).

*Modelo del PMSM* \(n=2\), \(m=2\), \(d=1\)
\begin{multline*}
\hat{y}(k+1) = -a_1y(k) - a_2y(k-1) + b_0u(k) + b_1u(k-1) + b_2u(k-2)d+1) 
\end{multline*}

** Identified model

   \[ H(z) = \frac{6.91z^2 + 16.48z -17.87}{z(z^2 - 1.766z + 0.7665)} = \frac{6.91(z+3.19)(z-0.81)}{z(z-0.998)(z-0.768)}\]

#   #+begin_center
#   \includegraphics[width=0.6\linewidth]{../../figures/validation-result-2020-07-24.png}
#   #+end_center

** From pulse-transfer function to state space model
   #+begin_export latex
   \begin{center}
     \begin{tikzpicture}[node distance=32mm, block/.style={rectangle, draw, minimum width=15mm}, sumnode/.style={circle, draw, inner sep=2pt}]
    
       \node[coordinate] (input) {};
       \node[block, right of=input] (plant)  {$H(z) = \frac{b_0z^2 + b_1z + b_2}{z(z^2 + a_1 z + a_2)}$};
       \node[coordinate, right of=plant] (output) {};

       \draw[->] (input) -- node[above, pos=0.3] {$u(k)$} (plant);
       \draw[->] (plant) -- node[above, near end] {$y(k)$} (output);

       \begin{scope}[yshift=-2cm, xshift = 3cm]
       \node {$\Updownarrow$};
       \end{scope}

       \begin{scope}[yshift=-4cm, node distance=50mm, xshift=-2cm]
       \node[coordinate] (input) {};
       \node[block, right of=input, align=center] (plant)  {$x(k+1) = \Phi x(k) + \Gamma u(k)$\\$y(k) = C x(k)$};
       \node[coordinate, right of=plant] (output) {};

       \draw[->] (input) -- node[above, pos=0.3] {$u(k)$} (plant);
       \draw[->] (plant) -- node[above, near end] {$y(k)$} (output);
       \end{scope}



     \end{tikzpicture}
   \end{center}

   #+end_export

** Canonical forms
   Given pulse-transfer function 
   \[ H(z) = \frac{b_1 z^2 + b_2 z + b_3}{z^3 + a_1z^2 + a_2z + a_3}.\] 
   Find a representation in state space form
   \begin{align*}
    x(k+1) &= \Phi x(k) + \Gamma u(k) \\
    y(k) &= C x(k)
    \end{align*}

#+BEAMER: \pause

   - Controlable canonical form
   - Observable canonical form

** Controllable canonical form
   Given pulse-transfer function 
   \[ H(z) = \frac{b_1 z^2 + b_2 z + b_3}{z^3 + a_1z^2 + a_2z + a_3}.\] 

   \begin{align*}
    x(k+1) &= \begin{bmatrix} -a_1 & -a_2 & -a_3\\1 & 0 & 0\\0 & 1 & 0\end{bmatrix} x(k) + \begin{bmatrix}1\\0\\0\end{bmatrix} u(k) \\
    y(k) &= \begin{bmatrix} b_1 & b_2 & b_3 \end{bmatrix} x(k)
    \end{align*}


** Observable canonical form

   Given pulse-transfer function 
   \[ H(z) = \frac{b_1 z^2 + b_2 z + b_3}{z^3 + a_1z^2 + a_2z + a_3}.\] 

   \begin{align*}
    x(k+1) &= \begin{bmatrix} -a_1 & 1 & 0\\-a_2 & 0 & 1\\-a_3 & 0 & 0\end{bmatrix} x(k) + \begin{bmatrix}b_1\\b_2\\b_3\end{bmatrix} u(k) \\
    y(k) &= \begin{bmatrix} 1 & 0 & 0 \end{bmatrix} x(k)
    \end{align*}


** Canonical forms
   *Activity* Find the controllable canonical form for the pulse-transfer function of the motor (needed for question 2 on the exercises).
   
   \[ H(z) = \frac{6.91z^2 + 16.48z -17.87}{z(z^2 - 1.766z + 0.7665)} = \frac{6.91(z+3.19)(z-0.81)}{z(z-0.998)(z-0.768)}\]

   #+BEAMER:\pause
   
\begin{center}
  \includegraphics[width=.6\linewidth]{../../figures/discrete-controllable.png}
\end{center}

* Apollo moon lander
** Discretizing a continuous-time state-space model

** Example - The Apollo lunar module

   #+begin_export latex
   \begin{center}
   \includegraphics[width=\linewidth]{../../figures/fig-apollo}
   \end{center}
   #+end_export

*** Notas                                                          :noexport:
    Ayer vímos este modelo del módulo lunar de Apollo. El modelo es para el control de la velocidad horizaontal, z dot. Cambié la dirección de esta flecha que representa el empuje del propulsor principal, para que enseña la fuerza que actua en el módulo. Para que este se mantenga a cierta distancia del superficie de la luna, esta fuerza tiene que tener un componente vertical con magnitúd mg, donde este g es la acceleration de gravedad en el superficie de la luna, que es 1.62 m/s^2.

    Cuando el módulo tiene un  angula al respeto al vertical, esta fuerza de propulso va a tener un componente horizontal. Cual es su magnitúd?

    La dinámica del sistema está expresado abajo en forma de un diagrama de bloques. La señal de entrada es el torque causada por los propulsores de atitúd. Esta causa una acceleracińo angular del módulo de 1/J por el torque, dónde J es el momento de inertia. Integrando la acceleración nos da la velocidad angular. 

    Si vemos las fuerzas en la dirección horizontal, vemos que 
    m\ddot{z} = F_h = mg tan\theta
    \ddot{z} = g \tan\theta \approz g \theta, entonces k2=g

    Integrando la acceleración nos da la velocidad.

    La approximación lineal tiene la función de transferencia G = \frac{1}{J}k_2/s^3 = (g/J) / s^3

    Es una sistema de orden tres, entonces se necesita tres variables de estado para representar su dinámica. 

** Example - The Apollo lunar module
   State variables: \( x = \begin{bmatrix} x_1 & x_2 & x_3 \end{bmatrix}^T = \begin{bmatrix} \dot{\theta} & \theta & \dot{z} \end{bmatrix}^T\). With dynamics
   \[ \begin{cases} \dot{x}_1 =  \ddot{\theta} = \frac{1}{J} u\\ \dot{x}_2 = \dot{\theta} = x_1\\ \dot{x}_3 = \ddot{z} = g\theta = gx_2 \end{cases} \]

   \[ \dot{x} = \begin{bmatrix} \dot{x}_1\\\dot{x}_2\\\dot{x}_3\end{bmatrix} = \underbrace{\begin{bmatrix} \textcolor{red!60!black}{0} & \textcolor{red!60!black}{0} &\textcolor{red!60!black}{0} \\\textcolor{red!60!black}{1} & \textcolor{red!60!black}{0}& \textcolor{red!60!black}{0}\\ \textcolor{red!60!black}{0}& \textcolor{red!60!black}{g} &\textcolor{red!60!black}{0} \end{bmatrix}}_{A} \begin{bmatrix} x_1\\x_2\\x_3\end{bmatrix} + \underbrace{\begin{bmatrix} \textcolor{red!60!black}{\frac{1}{J}} \\ \textcolor{red!60!black}{0} \\\textcolor{red!60!black}{0}  \end{bmatrix}}_{B} u \]

* Discretization

** Discretization
   The general solution to a linear, continuous-time state-space system
   \begin{align*}
   x(t_k+\tau)& = \mathrm{e}^{A(\tau)} x(t_k) + \int_{0}^\tau \mathrm{e}^{As} B u\big((t_k+\tau)-s) ds
   \end{align*}
   
   #+BEAMER: \pause

#+begin_export latex
   \begin{center}
     \begin{tikzpicture}
       \draw[->] (-3,0) -- (6,0) node[below] {$t$};
       \draw (-2, 0.2) -- ( -2, 0) node[below] {$t_k=kh$};
       \draw (1, 0.2) -- ( 1, 0) node[below] {$t_{k+1}=kh+h$};
       \draw (4, 0.2) -- ( 4, 0) node[below] {$kh+2h$};
       \draw[thick, orange!90!black] (-3,0.3) -- (-2, 0.3) -- (-2,1) -- (1, 1) -- (1,0.8) -- (4, 0.8) --(4, 0.5) --(5.5, 0.5) node[pos=0.1, coordinate, pin=30:{$u(t)$}] {} ; 
       \draw[->] (-2, -0.7) -- (0, -0.7) node[below] {$\tau$};
     \end{tikzpicture}
   \end{center}
   #+end_export

   #+BEAMER: \pause
   
   \begin{align*}
    x(kh+h) &= \mathrm{e}^{Ah} x(kh) + \int_{0}^{h} \mathrm{e}^{As} B u(kh+h-s) ds\\
     &= \underbrace{\mathrm{e}^{Ah}}_{\Phi(h)} x(kh) + \underbrace{\left(\int_{0}^h \mathrm{e}^{As} B ds \right)}_{\Gamma(h)} u(kh)
  \end{align*}

** Discretization - The matrix exponential

\begin{center}
  \includegraphics[width=.7\linewidth]{../../figures/dubious.png}
\end{center}

** Discretization - The matrix exponential
   Square matrix \(A\). Scalar variable \(t\).
   \[ \mathrm{e}^{At} = I + At + \frac{t^2}{2!}A^2 + \frac{t^3}{3!} A^3 + \cdots\]
   Laplace transform
   \[ \laplace{\mathrm{e}^{At}} = (sI - A)^{-1}\]
   

** Discretization - example
\small

   \begin{align*}
    x(kh+h) &= \mathrm{e}^{Ah} x(kh) + \int_{0}^{h} \mathrm{e}^{As} B u(kh+h-s) ds\\
     &= \underbrace{\mathrm{e}^{Ah}}_{\Phi(h)} x(kh) + \underbrace{\left(\int_{0}^h \mathrm{e}^{As} B ds \right)}_{\Gamma(h)} u(kh)
  \end{align*}
   \[ A = \begin{bmatrix} 0 & 0 & 0\\1 & 0 & 0\\0 & g & 0\end{bmatrix}, \quad A^2 = \begin{bmatrix} 0 & 0 & 0\\1 & 0 & 0\\0 & g & 0\end{bmatrix}\begin{bmatrix} 0 & 0 & 0\\1 & 0 & 0\\0 & g & 0\end{bmatrix}= \begin{bmatrix} 0 & 0 & 0\\0 & 0 & 0\\g & 0  & 0\end{bmatrix}, \quad A^3 = 0\]
   So,
  \begin{align*}
   \Phi(h) &= \mathrm{e}^{Ah} = I + Ah + A^2 h^2/2  + \cdots \\
  \end{align*}

  #+BEAMER: \pause

  \begin{align*}
   \Phi(h) &= \begin{bmatrix} 1 & 0 & 0\\0 & 1 & 0\\0 & 0 & 1\end{bmatrix} + \begin{bmatrix} 0 & 0 & 0\\1 & 0 & 0\\0 & g & 0\end{bmatrix}h + \begin{bmatrix} 0 & 0 & 0\\0 & 0 & 0\\g & 0 & 0\end{bmatrix}\frac{h^ 2}{2}= \begin{bmatrix} 1 & 0 & 0\\h & 1 & 0\\\frac{h^2g}{2} & hg & 1\end{bmatrix}
   \end{align*}

** Discretization - example
   \begin{align*}
    x(kh+h) &= \mathrm{e}^{Ah} x(kh) + \int_{0}^{h} \mathrm{e}^{As} B u(kh+h-s) ds\\
     &= \underbrace{\mathrm{e}^{Ah}}_{\Phi(h)} x(kh) + \underbrace{\left(\int_{0}^h \mathrm{e}^{As} B ds \right)}_{\Gamma(h)} u(kh)
  \end{align*}
  \[\mathrm{e}^{As}B &=  \begin{bmatrix} 1 & 0 & 0\\s & 1 & 0\\\frac{s^2g}{2} & sg & 1\end{bmatrix} \begin{bmatrix} \frac{1}{J}\\0\\0 \end{bmatrix} = \frac{1}{J} \begin{bmatrix} 1\\s\\\frac{gs^2}{2} \end{bmatrix}
  \]
  \begin{align*}
  \Gamma (h) &= \int_0^h \mathrm{e}^{As}B ds = \frac{1}{J} \int_0^h \begin{bmatrix} 1\\s\\\frac{gs^2}{2} \end{bmatrix}ds = \frac{1}{J}\begin{bmatrix} h\\ \frac{h^2}{2} \\ \frac{g h^3}{6} \end{bmatrix} 
  \end{align*}

** Discretization - example
   \begin{align*}
    x(kh+h) &= \mathrm{e}^{Ah} x(kh) + \int_{0}^{h} \mathrm{e}^{As} B u(kh+h-s) ds\\
     &= \underbrace{\mathrm{e}^{Ah}}_{\Phi(h)} x(kh) + \underbrace{\left(\int_{0}^h \mathrm{e}^{As} B ds \right)}_{\Gamma(h)} u(kh)\\
     &= \begin{bmatrix} 1 & 0 & 0\\h & 1 & 0\\\frac{h^2g}{2} & hg & 1\end{bmatrix} x(kh) + \frac{1}{J} \begin{bmatrix} h\\ \frac{h^2}{2} \\ \frac{g h^3}{6} \end{bmatrix} u(kh)
  \end{align*}

** Discretization - exercise                                       :noexport:
   *Activity* Discretize the system (question 3 on today's exercises on Canvas)
   \[ \dot{x} = Ax + Bu = \begin{bmatrix} 0 & 1\\ 0 & 0 \end{bmatrix} x + \begin{bmatrix}0\\1\end{bmatrix}u\]

   

  
*** notes                                                          :noexport:

AA = [0 1;0 0][0 1;0 0] = [0 0;0 0]
so
exp(Ah) = I + Ah + A^2 h^2/2 + ... = I + Ah.

exp(As)B = [1 h;0 1][0;1] = [h;1]

int exp(As)B = [h^2/2;h]


   
** Discretizing a continuous-time state space model                :noexport:
   \begin{align*}
    x(kh+h) &= \mathrm{e}^{Ah} x(kh) + \int_{0}^{h} \mathrm{e}^{As} B u(kh+h-s) ds\\
     &= \underbrace{\mathrm{e}^{Ah}}_{\Phi(h)} x(kh) + \underbrace{\left(\int_{0}^h \mathrm{e}^{As} B ds \right)}_{\Gamma(h)} u(kh)\\
   \end{align*}

   #+BEAMER: \pause
   
   \begin{align*}
    x(kh+h) &= \begin{bmatrix} 1 & 0 & 0\\h & 1 & 0\\\frac{h^2g}{2} & hg & 1\end{bmatrix} x(kh) + \frac{1}{J} \begin{bmatrix} h\\ \frac{h^2}{2} \\ \frac{g h^3}{6} \end{bmatrix} u(kh)
  \end{align*}

* Stability
** Stability
** Eigenvalues and eigenvectors
   *Definition* The eigenvalues \(\lambda_i  \in \mathbb{R} \) and eigenvectors \(v_i \in \mathbb{R}^n\) of a matrix \(\Phi \in \mathbb{R}^{n\times{}n}\) are the \(n\) pairs \((\lambda_i, v_i \neq 0 ), \; i=1,2,\ldots,n\) that satisfy
   \[ \Phi v_i = \lambda_i v_i \]

** Stability
   The system
   \begin{equation*}
   x(k+1)=\Phi x(k), \ \ x(0)=x_0
   \end{equation*}
   is *stable* if  $\underset{t\to\infty}{\lim}x(kh)=0, \quad \forall\;  x_0\in\Bbb{R}^n$.

   A necessary and sufficient requirement for stability is that *all the eigenvalues of \(\Phi\) are inside the unit circle.*
   
   The *eigenvalues* of \(\Phi\) are the  *poles* of the system.

** Eigenvalues and eigenvectors - exercise                         :noexport:
   *Activity* Verify that the vector
   \[ v = \begin{bmatrix}1\\0\end{bmatrix}\]
   is an eigenvector of
   \[ \Phi = \begin{bmatrix} 2 & 0\\0 & \frac{1}{2} \end{bmatrix}. \]
   What is the corresponding eigenvalue?

* Controllability and observability                                :noexport:

** Controllability
   Controllability is the answer to the question /Can we drive the state of the system to any location in the state space by a suitable input sequence \(u(k),\; k=0,1,2,\ldots,n-1\)?/

Consider
\[ x(k+1) = \Phi x(k) + \Gamma u(k), \quad x(0)= x_0 \]
with solution
\begin{equation}
\begin{split}
x(n) &= \Phi^nx(0) + \Phi^{n-1}\Gamma u(0) + \Phi^{n-2}\Gamma u(1) + \cdots + \Gamma u(n-1)\\
     &= \Phi^nx(0) + W_c U, 
\end{split}
\end{equation}
where
\begin{align*}
W_c &= \bbm \Gamma & \Phi\Gamma & \cdots & \Phi^{n-1}\Gamma\ebm\\
U &= \bbm u(n-1) & u(n-2) & \cdots & u(0) \ebm\transp
\end{align*}

** Controllability
To find the input sequence \(u(k)\) that takes the state from  \(x(0)=x_0\) to \(x(n) = x_d\) we may solve for \(U\) in the equation
\[ x_d = \Phi^nx_0 + W_cU.\]

\[ U = W_c\inv \left(x_d - \Phi^nx(0)\right) \]

This is possible when the matrix \(W_x\) is *invertible*:

The state-space system above is controllable if and only if the /Controllability matrix/ \(W_c\)  has rank \(n\), i.e. 
\[ \det W_c \neq 0.\]

* Observability                                                    :noexport:
** Observability
\footnotesize

Observability is the answer to the question "Can we determine the initial state \(x(0)\) if we only know \(y(k), \; k=0,1,2,\ldots, n-1\)?"

The first \(n\) values of the output sequence are given by
\begin{align*}
y(0) &= Cx(0)\\
y(1) &= Cx(1) = C \left( \Phi x(0) + \Gamma u(0)  \right)\\
& \vdots\\
y(n-1) &= Cx(n-1) = C \left( \Phi^{n-1} x(0) + W_c U \right).
\end{align*}
This gives the equation
\[ \bbm C\\C\Phi\\\vdots\\C\Phi^{n-1} \ebm x(0) = \bbm y(0)\\y(1) - C\Gamma u(0)\\\vdots\\ y(n-1) - CW_c U\ebm \]
which can be solved for \(x(0)\) if and only if the matrix 
\[W_o = \bbm C\\C\Phi\\\vdots\\C\Phi^{n-1} \ebm\] has full rank.

** Observability, contd
The equation
\[ \bbm C\\C\Phi\\\vdots\\C\Phi^{n-1} \ebm x(0) = \bbm y(0)\\y(1) - C\Gamma u(0)\\\vdots\\ y(n-1) - CW_c U\ebm \]
 can be solved for \(x(0)\) if and only if the matrix 
\[W_o = \bbm C\\C\Phi\\\vdots\\C\Phi^{n-1} \ebm\] has full rank. If this is the case, the system is said to be *observable*.

* State feedback
** State feedback control
** State feedback control

Given
   \begin{equation}
   \begin{split}
    x(k+1) &= \Phi x(k) + \Gamma u(k)\\
    y(k) &= C x(k)
   \end{split}
   \label{eq:ssmodel}
  \end{equation}
  and measurements (or an estimate) of the state vector \(x(k)\). 

  *Linear state feedback* is the control law
  \begin{equation*}
  \begin{split}
   u(k) &= f\big((x(k), u_c(k)\big) = -\textcolor{morange}{l_1}x_1(k) - \textcolor{morange}{l_2}x_2(k) - \cdots - \textcolor{morange}{l_n} x_n(k) + \textcolor{mbluegreen}{l_0}u_c(k)\\
        &= -\textcolor{morange}{L}x(k) + \textcolor{mbluegreen}{l_0}u_c(k), 
  \end{split}
  \end{equation*}
  where \[ \textcolor{morange}{L} = \bbm \textcolor{morange}{l_1} & \textcolor{morange}{l_2} & \cdots & \textcolor{morange}{l_n} \ebm. \]
  Substituting this in the state-space model \eqref{eq:ssmodel} gives
   \begin{equation}
   \begin{split}
    x(k+1) &= \left(\Phi -\Gamma \textcolor{morange}{L} \right) x(k) + \textcolor{mbluegreen}{l_0}\Gamma u_c(k)\\
    y(k) &= C x(k)
   \end{split}
   \label{eq:closedloop}
  \end{equation}

** Pole placement by state feedback
   Given (or choosing) a desired placement of the closed-loop poles \(p_1, p_2, \ldots, p_n\), being roots of the desired characteristic polynomial
   \begin{equation}
   a_c(z) = (z-p_1)(z-p_2)\cdots(z-p_n) = z^n + \alpha_1 z^{n-1} + \cdots \alpha_n.
   \label{eq:desiredpoles}
   \end{equation}

   #+BEAMER:\pause
   
   Linear state feedback gives the system
   \begin{equation}
   \begin{split}
    x(k+1) &= \left(\Phi -\Gamma \textcolor{morange}{L} \right) x(k) + \textcolor{mbluegreen}{l_0}\Gamma u_c(k)
   \end{split}
   \label{eq:closedloop}
  \end{equation}
 with characteristic polynomial
   \begin{equation}
   \det\left(zI - (\Phi - \Gamma \textcolor{morange}{L})\right) = z^n + \beta_1(\textcolor{morange}{l_1},\ldots,\textcolor{morange}{l_n}) z^{n-1} + \cdots \beta_n(\textcolor{morange}{l_1}, \ldots, \textcolor{morange}{l_n}).
   \label{eq:poles}
   \end{equation}
  
   #+BEAMER:\pause

Set the coefficients of the desired characteristic polynomial \eqref{eq:desiredpoles} equal to the coefficients of \eqref{eq:poles} to obtain the system of equations
   \begin{equation*}
   \begin{split}
   \beta_1(\textcolor{morange}{l_1}, \ldots, \textcolor{morange}{l_n}) &= \alpha_1\\
   \beta_2(\textcolor{morange}{l_1}, \ldots, \textcolor{morange}{l_n}) &= \alpha_2\\
   &\vdots\\
   \beta_n(\textcolor{morange}{l_1}, \ldots, \textcolor{morange}{l_n}) &= \alpha_n
   \end{split}
   \label{eq:coeffs}
   \end{equation*}

** Pole placement by state feedback
   The system of equations
   \begin{equation*}
   \begin{split}
   \beta_1(\textcolor{morange}{l_1}, \ldots, \textcolor{morange}{l_n}) &= \alpha_1\\
   \beta_2(\textcolor{morange}{l_1}, \ldots, \textcolor{morange}{l_n}) &= \alpha_2\\
   &\vdots\\
   \beta_n(\textcolor{morange}{l_1}, \ldots, \textcolor{morange}{l_n}) &= \alpha_n
   \end{split}
   \label{eq:coeffs}
   \end{equation*}

   is always linear in the parameters of the controller, hence
   \begin{equation*}
   M \textcolor{morange}{L}\transp = \alpha,
   \end{equation*}
   where \(\alpha\transp = \bbm \alpha_1 & \alpha_2 & \cdots & \alpha_n \ebm.\)

** Pole placement and controllability                              :noexport:
   It can be shown that the controllability matrix
   \[W_c = \bbm \Gamma & \Phi\Gamma & \cdots & \Phi^{n-1}\Gamma\ebm\]
   is a factor of the matrix \(M\)
   \[ M = \bar{M} W_c. \] Hence, in general, the equations
   \begin{equation}
   \bar{M}W_c L\transp = \alpha \qquad \Rightarrow \qquad L\transp = W_c^{-1}\bar{M}^{-1}\alpha
   \label{eq:poleplace}
   \end{equation}
   only has a solution if \(W_c\) is invertible, that is when the system is /controllable/.

   Note that the equations \eqref{eq:poleplace} may also have solutions when the system is not controllable, if  *\(\alpha\) is in the column space of \(M\)*. That is 
  \[ \alpha = b_1 M_{:,1} + b_2M_{:,2} + \cdots + b_M_{:,m}, \; m < n \]
 
** Pole placement by state feedback
   Given a desired placement of the closed-loop poles \(p_1, p_2, \ldots, p_n\), being roots of the desired characteristic polynomial
   \begin{equation*}
   a_c(z) = (z-p_1)(z-p_2)\cdots(z-p_n) = z^n + \alpha_1 z^{n-1} + \cdots \alpha_n.
   \label{eq:desiredpoles}
   \end{equation*}
   and closed-loop system
   \begin{equation*}
   \begin{split}
    x(k+1) &= \left(\Phi -\Gamma \textcolor{morange}{L} \right) x(k) + \textcolor{mbluegreen}{l_0}\Gamma u_c(k)\\
    y(k) &= C x(k)
   \end{split}
   \label{eq:closedloop}
  \end{equation*}

  The Matlab (/control systems toolbox/) has methods for computing the gain vector $L$

  1. *Ackerman's method* 
     #+begin_src octave
	L = acker(Phi, Gamma, pd)
     #+end_src
  1. *Numerically more stable method* 
     #+begin_src octave
	L = place(Phi, Gamma, pd)
     #+end_src

** The reference input gain \(l_0\)

   The closed-loop state space system
   \begin{equation*}
   \begin{split}
    x(k+1) &= \underbrace{\left(\Phi -\Gamma \textcolor{morange}{L} \right)}_{\Phi_c} x(k) + \textcolor{mbluegreen}{l_0}\Gamma u_c(k)\\
    y(k) &= C x(k)
   \end{split}
   \end{equation*}
   with constant reference signal \(u_c(k) = u_{c,f}\) has the steady-state solution (\(x(k+1)=x(k)\))
   #+BEAMER: \pause
   \[ x_f =  \textcolor{mbluegreen}{l_0} (I - \Phi_c)^{-1}\Gamma u_{c,f}\]
   \[ y_f = Cx_f = \textcolor{mbluegreen}{l_0} C(I - \Phi_c)^{-1}\Gamma u_{c,f}.\]
   We want \(y_f =  u_{c,f}\),
   \[ \Rightarrow \qquad \textcolor{mbluegreen}{l_0} = \frac{1}{C(I-\Phi_c)^{-1}\Gamma}\]

* Exercise                                                         :noexport:

** Exercise - The harddisk drive arm
\footnotesize
The model of the arm of the harddisk drive
#+begin_center
\includegraphics[width=0.2\linewidth]{../../figures/hard-drive.png}
#+end_center
can, with suitable choice of sampling period, be written

\[x(k+1) = \Phi x(k) + \Gamma u(k) = \begin{bmatrix} 1 & 0.4\\ 0 &1 \end{bmatrix} x + \begin{bmatrix}0.16\\0.8\end{bmatrix}u.\]
With linear state feedback \(u(k) = -Lx(k) + l_0u_c(k)\) the closed-loop system is
\begin{equation*}
   \begin{split}
    x(k+1) &= \left(\Phi -\Gamma L \right) x(k) + l_0\Gamma u_c(k)\\
           &= \begin{bmatrix} 1-0.16l_1 & 0.4 - 0.16l_2\\-0.8l_1 & 1-0.8l_2\end{bmatrix} x(k) + l_0\Gamma u_c(k).
   \end{split}
\end{equation*}

*Determine* the characteristic polynomial of the closed-loop system \(\det \Big( zI - (\Phi - \Gamma L)\Big)\)

* lunar module                                                     :noexport:
** Matlab   
** Actividad
   En grupos: 
   1. Visualiza la atitúd (angulo \(\theta\) en grados) del módulo lunar durante la simulación. Cuál es el angulo máximo?
   2. Determina las ganancias \(L = \bbm l_1 & l_2 & l_3 \ebm\) para control /dead-beat/. Es decir con todos los polos del sistema en lazo cerrado en el origen.
   3. Simula el sistema en lazo cerrado con control dead-beat. Cuál es el angulo máximo del módulo lunar?
   4. Cambia el periodo de muestreo de \(h=1\)s a \(h=0.5\)s. Cuál es el angulo máximo ahora, usando control  dead-beat.
